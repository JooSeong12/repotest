artifact : myBoard

add depedencies :
spring web
dev-tool
thymeleaf
jpa
mysql
validation
h2
lombok

maven repository에서 thymeleaf 검색 후 Thymeleaf Layout Dialect 클릭 » 버전 3.0.0 클릭 후
gradle에 있는
// https://mvnrepository.com/artifact/nz.net.ultraq.thymeleaf/thymeleaf-layout-dialect
implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.0.0' 을 복사해서 build.gradle에 붙여넣고 오른쪽 위
로딩버튼 누르기

template 아래에 fragments와 layouts 폴더 생성(각각 템플릿 바로 아래 폴더로 세팅)
fragments에 header와 footer html 파일 각각 생성
>> 헤더에 타임리프 생성

layouts에 default_layout html 생성
>> 헤더에 <html xmlns:th="www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">

bootstrap검색 후 include via cdn에 있는 두개 링크 복사 후
default_layout 헤더 부분에 복사

Components > navbar > Nav 
Navbar navigation links build on our 에 있는 html 복사 후 header에 붙여넣기

footer에는
<hr>
    <p>MyStudy<a href="#">Privacy</a> | <a href="#">Terms</a></p>
를 넣기
================================================================================
header html

<!DOCTYPE html>
<html xmlns:th="www.thymeleaf.org">
<!--footer fragment-->
<div th:fragment="header">
    <nav class="navbar navbar-expand-lg bg-body-tertiary">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="#">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Features</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">Pricing</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link disabled" aria-disabled="true">Disabled</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
</div>
</html>
================================================================================
footer html

<!DOCTYPE html>
<html xmlns:th="www.thymeleaf.org">
<!--footer fragment-->
<div class="footer" th:fragment="footer">
    <hr>
    <p>MyStudy<a href="#">Privacy</a> | <a href="#">Terms</a></p>
</div>
</html>
================================================================================
default_layout html

<!DOCTYPE html>
<html xmlns:th="www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">

<head>
    <meta charset="UTF-8">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <title>Title</title>
    <link rel="stylesheet" th:href="@{css/layout.css}">
</head>
<body>
<!-- Header fragment가 들어갈 자리-->
    <th:block th:replace="fragments/header::header"></th:block>
<!-- content fragment가 들어갈 자리-->
    <th:block layout:fragment="content"></th:block>
<!-- footer fragment가 들어갈 자리-->
    <th:block th:replace="fragments/footer::footer"></th:block>
</body>
</html>
================================================================================
LayoutTestController에
@Controller
public class LayoutTestController {
    @GetMapping("/test")
    public String testView(Model model){
        model.addAttribute("name", "김주성");
        return "articles/show_all";
    }
}

================================================================================
show_all html파일에

<!DOCTYPE html>
<html xmlns:th="www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
      layout:decorate="~{layouts/default_layout}">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<div class="content" layout:fragment="content">
    <h1>[[${name}]]님 반갑습니다.</h1>
    <table class="table">
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Content</th>
        </tr>
        <tr>
            <td>1</td>
            <td>타이틀1</td>
            <td>내용1</td>
        </tr>
    </table>
</div>
</body>
</html>
================================================================================
application.properties >> application.yml로 이름 바꾸기(야믈파일로 타입을 바꿔서 DB와 연동)

#MySql 연결하기
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/article
    username: root
    password: 1111

  sql:
    init:
      mode: always

  jpa:
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        show_sql: true
        format_sql: true
    database-platform: org.hibernate.dialect.MySQLDialect
================================================================================
h2 db download 검색 후 제일위에 Version 2.2.224버전 다운로드
설치프로그램 실행 후 설치

c드라이브 > 프로그램파일x86 > h2폴더 > bin > h2.bat 실행
인터넷창이랑 명령 프롬프트 뜸 >> 인터넷창에서 연결 클릭

================================================================================
resources에 new file을 하고 application-test.properties를 생성하고
#h2 DB 연결 --- 테스트 용
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:tcp://localhost/~/test
spring.datasource.username=sa
spring.datasource.password=

#H2 DB 방언설정
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.hibernate.ddl-auto=create
를 넣는다(TEST용 DB연결하는 것)

>> 실제와 테스트용의 DB를 나눠서 실행하는것임(MySql이 프로그램이 무거워서 가벼운 h2db를 테스트용으로 사용하려고)
================================================================================

articlerepository에서 interface 옆에 articlerepository 부분에서 컨트롤+알트 +t 눌러서 test파일 생성

================================================================================
ArticleRepositoryTest가 생성되면

@SpringBootTest
@TestPropertySource(locations = "classpath:application-test.properties")
class ArticleRepositoryTest {
    @Test
    @DisplayName("모든 자료 검색")
    void findAllTest(){

    }
}
를 넣는다.
================================================================================
Assertions는 assertj꺼를 사용해야함
Assertion.assertThat(resultLists.toString()).isEqualTo(expectList.toString());
>> 여기서 assertThat에서 알트엔터 후 두번째 add static으로 설정하면
>> assertThat(resultLists.toString()).isEqualTo(expectList.toString());  이렇게 변함
================================================================================
테스트 전체

@SpringBootTest
@Transactional
@TestPropertySource(locations = "classpath:application-test.properties")
class ArticleRepositoryTest {
    @Autowired
    ArticleRepository articleRepository;

    @Test
    void 자료입력테스트(){
//        Given
        Article expectArticle = new Article(4L, "라라라", "444");
//        When
        Article newArticle = new Article(null, "라라라", "444");
        articleRepository.save(newArticle);
//        Then
        Article actualArticle = articleRepository.findById(4L).orElse(null);
        assertThat(actualArticle.toString()).isEqualTo(expectArticle.toString());
    }


    @Test
    void 모든데이터검색_클래스_성공(){
//        Given
        Article article1 = new Article(1L,"가가가","111");
        Article article2 = new Article(2L,"나나나","222");
        Article article3 = new Article(3L,"다다다","333");
        List<Article> expectList = new ArrayList<>();
        expectList.add(article1);
        expectList.add(article2);
        expectList.add(article3);
//        when
        List<Article> resultLists = articleRepository.findAll();
//        then
        assertThat(resultLists.toString()).isEqualTo(expectList.toString());
    }

    @Test
    void 모든데이터검색_클래스_실패(){
//        Given
        Article article1 = new Article(1L,"라라라","111");
        Article article2 = new Article(2L,"나나나","222");
        Article article3 = new Article(3L,"다다다","333");
        List<Article> expectList = new ArrayList<>();
        expectList.add(article1);
        expectList.add(article2);
        expectList.add(article3);
//        when
        List<Article> resultLists = articleRepository.findAll();
//        then
        assertThat(resultLists.toString()).isNotEqualTo(expectList.toString());
    }

    @Test
    void 전체데이터검색_개수(){
//        given
        int expectCount = 3;
//        when
        int actualCount = articleRepository.findAll().size();
//        then
        assertThat(actualCount).isEqualTo(expectCount);
    }

    @Test
    void 자료삭제_테스트_성공(){
        //Given
        Long deleteId = 4L;
        //when
        articleRepository.deleteById(4L);
        //then
        Article actualResult = articleRepository.findById(4L).orElse(null);
        assertThat(actualResult).isEqualTo(null);
    }

    @Test
    void 자료수정_테스트(){
        //Given
        Article expectArticle = new Article(1L,"타이틀수정", "컨텐트수정");
        //when
        Article updateArticle = new Article(1L,"타이틀수정", "컨텐트수정");
        articleRepository.save(expectArticle);
        Article actualArticle = articleRepository.findById(1L).orElse(null);
        //then
        assertThat(actualArticle.toString()).isEqualTo(expectArticle.toString());
    }
}

