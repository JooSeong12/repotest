연습할 때 메인에서 클래스로
클래스에서 메인으로 가는 두가지방법으로 연습해볼 것

클래스도 하나의 변수로 생각하면 편하다
String은 원래 클래스인데 많이 사용해서 사용하기 편하게 만든 것
원래는 String car = new String() 이렇게 써야 인식하지만 이렇게 할 필요없다

전체적인 흐름부터 구상해야한다.

calss name : VendingMachine--main()
                VendingMachine vMachine = new
                 vMa.name = "콜라"   vMa2 = "사이다" 700원

totalMoney >> 스태틱에 있어야한다

class:ColaVendingMachine ---                         CyderVendingMachine

name = 콜라                                                   사이다

currentMoney : 0 >> 1000
productPrice 500                                             700
insertMoney() - 1000
serveCola() 잔액부족, 콜라 1개를 드립니다.



비교연산자
1 == 1 은 둘이 같냐? 라고 물어보는 것 실제로 sout(1 ==1)하고 출력하면 true로 출력됨
5 != 3 은 둘이 같지않은건지 물어보는 것 sout(5 != 3) 출력하면 true로 출력됨

논리연산자
&& >> if(1==1 && 2==2) >>> if안에 두개의 조건을 걸때 사용
|| >> 두개의 조건중 한개만 맞아도 될 때 사용

//            삼항연산자 = 조건연산자
            int n1 = 5;
//            조건? 참일 때 : 거짓일 때;
            System.out.println(n1 ==5? "5가 맞습니다" : "5가 아닙니다.");

            if(n1 == 5){
                System.out.println("5가 맞습니다");
            } else {
                System.out.println("5가 아닙니다.");

삼항연산자는 간이 if라고 생각하면된다.

//            나머지 연산자 %
        System.out.println(130/100); >> 몫을 구하는것으로 1만 나온다
        System.out.println(130 % 100); >> 나머지를 구하는것으로 30이 나온다

pakage : changeMoney
현재금액 : currentMoney = 135,200원

5만원권 : 2장
1만원권 : 3장
천원권 : 5장
500원 : 0개
100원 : 2개

int n = 100;
double d = 100.5;

d = n; >> 묵시적 캐스팅(암묵적 형변환) 작은그릇(int 4byte)을 큰 그릇에(double 8byte)담는것은 문제없음
묵시적 캐스팅 = 업캐스팅(Up Casting)
(double)n = d; >> 명시적 캐스팅 큰그릇을 작은그릇에 못담으니 명시적으로 형변환을 해야함


가솔린 8.86L를 충전한 A자동차는 총 182.736km를 운행할 수 있다고 한다. 이차의 연비는?
(소수이하 버리고 정수만 표기)

static double calc(double gasoline, doouble distance){}

main(
    double gasoline = 8.86;
    double distance = 182.736;
)
출력결과 :     연비 :  13km/L


mysql

chcp 65001 >> utf-8로 바꿔줌

-----삭제구문--------
테이블의 완전 삭제 : drop table 테이블명;
DB의 완전삭제 : drop database db명;
(쿼리 uodate, delete는 정신을 바짝 차리고 사용해야한다. 복구안됨)
테이블의 내용만 삭제 : delete from 테이블명 where 조건;

----update 구문--------
update 테이블명 set 필드명 = 바꿀값 where 조건

-----Alter 구문 ----(테이블 스키마 변경)
alter table 테이블명 rename to 바꿀 테이블명;
alter table 테이블명 drop column, add column, change column, modify column to 변경값
>> rename 외에 drop, add, change(칼럼(필드)의 이름까지 변경가능), modify(내용 수정만가능)도 사용할 수 있다


와일드카드 문자(wild card character) : * % _ 세가지가 있다
* : select 구문 내에서 활용, 없어도되고 모든것이 와도 된다 ex) 김* >>> 김뒤에 없어도 되고 아무거나 와도 됨
? : 자리를 차지하고 있는 한문자를 뜻함 ex) 김? >> 김뒤에 어떤것이든 와야함
% : select 구문의 조건절에서 사용하는 와일드 카드, *과 똑같은 기능
_ : select 구문의 조건절에서 사용하는 와일드 카드, ?와 똑같은 기능

 select name, phone from professor; >> 프로페서에서 폰과 이름 필드만 보겠다,

select name as '이름', phone as '전화번호' from professor; >> as는 별칭
프로페서 테이블에서 name 필드를 '이름'으로 바꾸고 phone 필드를 '전화번호'로 바꾼다.

select * from 테이블명
where 조건 >> 조건은 없으면 생략가능        조건 ex) 필드 >= 100
order by 기준필드 asc(오름차순) / desc(내림차순) (Ascending / Descending) >> 오름차순이나 내림차순으로 정렬할 때


----------------------------------------------------------------------------

티처 테이블에서 id가 3이상인 자료의 이름, 전화번호를 출력하세요
>> select name, phone from professor where id >= 3 order by desc;

     select * from professor where id between 1 and 3; >> id가 1~3사이인 자료 출력(between * and *)

학생테이블에서 belong IDE인 자료의 아이디, 이름, 소속을 출력하세요
>> select id, name, belong from student where belong = 'IDE';

학생테이블에서 belong이 'IDE' 또는 'ESE'인 자료의 아이디, 이름, 소속을 출력하세요
>> select id, name, belong from student where belong = 'IDE' or belong = 'ESE';
select id, name, belong from student where belong in('ide','ese'); >> or 안써도 in으로 간략하게 가능

스튜던트 테이블에서 아이디가 2010으로 시작하는 자료들의 id와 이름을 출력하세요
>> select id, name from student where id like '2010%';

스튜던트 테이블에서 이름이 3글자인 id와 이름을 출력하세요
>> select id, name from student where name like '___'; >> 밑줄이 세개 들어가면 됨

학생테이블에서 소속이 IDE가 아닌 자료들을 출력하세요
>> select * from student where belong != 'ide';              !=, <>,  not을 쓰면 같지않다는 연산
>> select * from student where not belong = 'ide';
>> select * from student where belong <> 'ide';

학생테이블에서 id가 2009가 포함되지않은 자료를 출력하세요
>> select * from student where id not like '2009%';

학생테이블에서 소속이 IDE 또는 CSE 또는 MSC 인 자료 중 id에 2011을 포함하는 자료를 p_id 내림차순으로 출력하세요
(출력은 id, 이름, 소속, 전화번호, 교수_ID로 column이름이 나타나도록 출력)
>> select id, name '이름', belong '소속', tell '전화번호', p_id '교수_id'
from student where belong in('ide', 'cse', 'mse') and id like '2011%' order by p_id desc;

학생테이블에서 이름 전진을 삭제합니다.
>> delete from student where name = '전진'

학생테이블에 전진의 자료를 삽입하세요.
>> insert into student value('20090302', '전진', 'IDE','01012321313','3');
>> 얘는 모든 기록을 넣을거라 테이블명 뒤에 필드명을 안넣고 value만 넣어도 들어가진다
>> 원래같으면 insert into student(id, name, belong, tell, p_id) value('20090302', '전진', 'IDE','01012321313','3'); 이렇게 해야함

학생테이블 중 전화번호에 131을 포함하는 자료를 삭제하세요
>> delete from student where tell like'%131%';

학생테이블에 id가 20080104인 학생의 이름을 오나미로 바꾸세요.
>> update student set name = '오나미' where id = '20080104';

학생테이블에 이름이 부우인 학생의 소속을 MSE, 전화번호를 010-7777-7777로 변경하세요.
>> update student set belong = 'MSE', tell = '01077777777' where name = '부우';
>> and가 아니라 ,로 구분

프로페서테이블을 티처테이블로 변경하세요
>> alter table professor rename teacher;

티처테이블에 star라는 필드를 맨 마지막에 추가를 합니다.
>> alter table teacher add column star int not null after phone;

티처테이블에 star를 bigint로 바꾸고 디폴트값을 10000으로 수정하세요.
>> alter table teacher modify column star bigint default 10000;

스타 콜럼을 삭제하세요
>> alter table teacher drop column star;

스튜던트 테이블의 소속인원수를 소속의 내림차순으로 출력
>> select belong, count(belong) from student
group by belong
order by belong desc;
위처럼 그룹핑을 해놓은 상태에서 count만 할거면 count(*)이 들어와도 상관없음
하지만 합계나 평균을 구하는 등의 수식은 count(belong)처럼 필드명이 들어가야함

스튜던트 테이블의 소속인원수를 소속인원수의 내림차순으로 출력하되 같은값은 소속의 오름차순으로 출력하세요
>> select belong, count(belong) as belong_count from student
group by belong
order by belong_count desc, belong asc;

위 의 결과중에 belong_count가 3이상인 자료만 출력
>> select belong, count(belong) as belong_count from student
group by belong
having belong_count >= 3
order by belong_count desc, belong asc;
여기서 having은 where와 같은 조건문

학생테이블에서 소속이 ide, mse, ese인 자료의 각 p_id의 평균을 구하고 평균이 2이하인 자료만 소속의 내림차순 정렬
>> select belong, avg(p_id) as id_avg from student where belong in('ide', 'mse', 'ese')
group by belong
having id_avg <=2
order by belong desc;

-----------------------------------------------------
group by
having

통계함수의 사용
select count(*) from student; >> 필드 구성하는 숫자를 세는 것
select count(*) as student_count from student; >> 구하는 표의 이름을 스튜턴트카운트로 출력
select avg(p_id) from student;>> 해당 필드의 평균을 구함
 select avg(p_id) as avg from student; >> 구하는 표의 이름을 avg로 설정해서 출력

