클래스 형변환
Animal dog = new Dog();

Animal이 가진 메서드는 a(), b()
Dog가 가진 메서드는 b(),c()

여기서 dog.c()를 출력하고 싶으면 형변환을 해야하는데
(Dog)dog.c()를 하면 형변환이 안되고
((DOG).dog).c()로 해야 형변환이 된다.

Abstract
처음에 클래스를 public abstract class Animal {} 로 선언하면 된다.
다음 자식클래스에서 무조건 쓰게할 메서드에도 abstract를 선언해준다.
abstract void speak(); >> 어차피 자식 클래스에서 무조건 쓸거기 때문에 부모 클래스에서는
                                바디(중괄호)가 필요없다.
다음 자식클래스에 해당 메서드를 오버라이드해서 가져온다.


인터페이스
생성시 new > javaclass > class가 아니고 바로 밑에 interface로 생성
public abstract void up();처럼 제약을 걸어줄 abstract 메서드를 만드는게 정석이지만
void up(); 이렇게만 작성해도 알아서 abstract로 인식한다.
> abstract로 class를 새로 생성하는데 인터페이스를 상속해야하므로
> public abstract class WildAnimal implements MoveInterface로 선언한다.
   (인터페이스는 extends가 아니고 implements로 연결해야함)
> 인터페이스를 구현하는 부모클래스는 클래스이름뒤에 Impl을 붙여준다(implement 약자)
> abstract 메서드를 만든다. 
> 인터페이스에 있는 메서드를 오버라이드해서 부모클래스에 가져온다


> 자식클래스는 인터페이스에 있는 메서드를 오버라이드 할 필요 없고 부모 클래스의 abstract 메서드만 오버라이드
   (이미 부모 클래스에서 인터페이스의 메서드를 오버라이드하면 자식클래스는 상속받아 사용가능하기때문에
    자식클래스에서 인터페이스의 메서드를 신경 쓸 필요없음)
> 하지만 특정한 인터페이스 메서드중 어떤것은 자식클래스 별로 별도로 출력하고 싶다면
   부모클래스에서 구현하지 않고 자식클래스에서 각각 구현해도 된다.
   (꼭 부모클래스에서 인터페이스의 메서드를 구현하지 않아도 됨) ex) String hide(); 같은것들

SRP : Single Responsibility Principal(단일책임원칙)
하나의 클래스에 너무 많은 메서드를 넣으면 수정하기 힘들다.
따라서 하나하나 나눠서 하는게 좋다

DIP(Dependency Inversion Principal) : 의존성 역전 원칙
DIP 원칙이란 객체에서 어떤 class를 참조해서 사용해야하는 상황이 생긴다면, 그
class를 직접 참조하는 것이 아니라 그 대상의 상위요소(추상클래스 or 인터페이스)로
참조하라는 원칙

Object class
Object 클래스는 가장 상위의 클래스이다.
구현되어 있지 않더라도 모든 클래스는 object 클래스에 상속되어 있다고 생각해야한다.
object o;를 하고 컨트롤+클릭해보면 object 클래스가 나온다
거기에 보면 toString, equals 등등 많은 것이 소속되어 있는게 보인다.

equals
int a = 3;
int b = 3;
이 있다고 가정하면 변수가 다르더라도 값이 같다면 같은 메모리 번지에 저장을 한다.
그래서 == 로 비교할때 값을 찾는것보다 메모리번지를 찾아서 같은 메모리 번지에 있다면 같다고 출력한다.
String타입변수는 너무 많이 사용해서 같은 기능을(==로 가능) 지원하지만
객체는 ==로 비교못하고 .equals()함수를 써야함
ex) 여기서 객체란 String str3 = new String("홍길동") 이런식으로 선언을 해서 변수가 아닌 객체일때는
==은 불가능하고 str5.equals(str6) 이런식으로 함수를 사용해서 비교해야한다.

객체의 내부내용까지 비교하려면 해쉬코드와 equals를 오버라이딩해야한다.
ex) Person 클래스에 이름과 나이가 있다고 가정해보면
메인함수내에 호출 시
Person person = new Person("김형민", 23);
Person person1 = new Person("김형민",23); 이런식으로 호출을 했다.
하지만
if (person1.name.equals(person.name)) {
            System.out.println("6. p1와 p2는 같다.");
        } else {
            System.out.println("6. p1와 p2는 같지 않다");
        }
이렇게 비교한다고 해서 비교가 되는것이 아니고 내부값으로 비교를 해보려면
Person 클래스에 해쉬코드와 equals를 오버라이딩해야 비교가 가능하다.


toString
해당하는 객체의 내용을 보고싶으면
해당 클래스에 toString을 오버라이딩해서 출력해야한다.
안그러면 메모리상 위치값인 해쉬코드만 나옴



ArrayList

선언 > ArrayList<String> colors = new ArrayList<>(Arrays.asList("black", "white"));
추가 > colors.add("pink");
배열값 확인 : enhanced for사용
> for(String color : colors){
            System.out.println(color);
        }

Iterator >> 배열의 값을 확인할 수 있게 해주는 장치

선언 > Iterator<String> iterator = colors.iterator();
배열값 확인 > while이용
while (iterator.hasNext()){
            String c = iterator.next();
            System.out.println(c);
        }

Set >> 순서가 없는 데이터의 집합(set은 데이터의 중복을 허용하지 않는다.)
선언 >> Set<String> fruits = new HashSet<>(Arrays.asList("사과", "오렌지"));
           처음에 제일 앞에 Set부분이 빨간색일텐데 f2누르고 알트+엔터 치면 import 뜨는데 거기서 엔터치면 됨
추가 >> fruits.add("사과");
배열값 확인
>> for(String fruit : fruits){
            System.out.println(fruit);
        }

Map >> <Key, Value> 쌍을 갖는 데이터의 집합(Key의 중복을 허용하지 않음, value는 중복 허용)
선언 >> Map<String, Integer> store = new HashMap<>();
추가 >> store.put("water", 1);
           store.put("fire",2);

배열값 확인
>> for(String key : store.keySet()){
            System.out.println(key + ": " + store.get(key));
        }

