----------------------------------------------------------------------------------------------------------------------------
https://start.spring.io/
추가할 dependence

Spring Boot DevTools
Lombok
Spring Web
Thymeleaf
MySQL Driver 
Spring Data JPA
----------------------------------------------------------------------------------------------------------------------------
database관련 설정을 하려면 resorce아래에 application.properties클래스에 설정을 한다.
(DB conn같이 DB와 연결되는 설정을 뜻함)

#MySQL 연결
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#데이터베이스 설정
spring.datasource.url=jdbc:mysql://localhost:3306/member
spring.datasource.username=root
spring.datasource.password=1111

#hibernate(DB에 날리는 모든 query / DDL, DML을 보여준다.)
spring.jpa.properties.hibernate.show_sql=true
#쿼리 구문을 예쁘게 보여주는 역할
spring.jpa.properties.hibernate.format_sql=true
#데이터베이스  테이블을 자동으로 생성(create, update, validate, none)
update는 내가 바꾼것만 수정해주는 것
validate는 유효성 검사만 하는것

spring.jpa.hibernate.ddl-auto=create >>> create로 실행시키면 이전에 있던 DB가 다 날아감
따라서 처음에 생성할 때만 create로 생성하고 나중에 수정하거나 배포단계에서는 update 또는 validate로 해야한다.

#샘플데이터 쿼리를 실행해서 DB를 초기화 할 때
#spring.jpa.defer-datasource-initialization=true
#spring.sql.init.mode=always

#hibernate이 보여주는 로그에 있는 ?값을 구체적으로 보여주는 설정
logging.level.org.hibernate.type.description.sql=trace
#Mysql 방언(dialect) 설정하기
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
----------------------------------------------------------------------------------------------------------------------------
entity 패키지 만들고 아래 DB명과 같은 클래스 만들기
해당 클래스 위에
@Entity 
@Table(name="member") >> ""안에는 DB명이 들어가야함
@Data
세개의 어노테이션 추가

public class Member {
    private Long id;
    private String name;
    private int age;
    private String addr;
}  >>> 테이블 안에 들어갈 컬럼들을 선언
----------------------------------------------------------------------------------------------------------------------------
Entity class에 어노테이션을 추가
public class Member {
    @Id // primarykey 라는 뜻
    @Column(name="id") >> 컬럼명을 나타내줌
    @GeneratedValue(strategy = GenerationType.AUTO) >> auto increse 설정
    private Long id;
    @Column(name="name",length = 40, nullable = false) >> 해당 컬럼의 길이(varchar 40이라는 뜻)와 공백 없이로 설정
    private String name;

    private int age;
    @Column(name="address", length = 200)
    private String addr;
}
----------------------------------------------------------------------------------------------------------------------------
repository 생성
패키지 생성하고 interface로 생성

@Repository >> repository 어노테이션 추가
public interface MemberRepository extends JpaRepository<Member, Long> {
} >> jpaRepository 상속받고 <entity로 만든 클래스명, primary키의 타입> 이렇게 넣어준다.

----------------------------------------------------------------------------------------------------------------------------

Controller에서 

 private final MemberRepository memberRepository;  >> repository를 선언

    public MemberController(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    } >> repository 생성자 만들기 >> 이렇게만 해놓으면 필요시 spring에서 알아서 인스턴스를 만들어줌

public String showAll(Model model) {
        List<Member> memberList = memberRepository.findAll(); >> repository를 리스트 안에 담는 것
        return "showMember";
    }


----------------------------------------------------------------------------------------------------------------------------

이후에 DTO 클래스를 만든다.
DB상 컬럼과 동일하게 만들기

@AllArgsConstructor >> 전체생성자 만드는 것
@NoArgsConstructor >> 아무것도 없는 생성자 만드는 것
@ToString
@Data
public class MemberDto {
    private long id;
    private String name;
    private int age;
    private String address;

    public static MemberDto fromMemberEntity(Member member){
        return new MemberDto(member.getId(), member.getName(), member.getAge(), member.getMyAddress());
    } >> DTO 전체를 담을 그릇 생성자
----------------------------------------------------------------------------------------------------------------------------
         DTO에 담는 두번째 방법
        List<MemberDto> dtoList = null;
        for(Member member : memberList){
            dtoList.add(MemberDto.fromMemberEntity(member));
        }
>> DTO에 static method를 만들어놔서 간단하게 코드 작성 가능
----------------------------------------------------------------------------------------------------------------------------
 DTO에 담는 세번째 방법
List<MemberDto> memberDtoList = memberRepository.findAll().stream()
.map(x-> MemberDto.fromMemberEntity(x)).toList();
>>> stream 이용하는 방법

----------------------------------------------------------------------------------------------------------------------------
        DTO에 담는 첫번째 방법
        MemberDto dto = null;
        List<MemberDto> dtoList = new ArrayList<>();
        for(Member member : memberList){
            dto.setId(member.getId());
            dto.setName(member.getName());
            dto.setAge(member.getAge());
            dto.setAddress(member.getMyAddress())
            dtoList.add(dto);
       }
----------------------------------------------------------------------------------------------------------------------------
DTO를 담는 리스트까지 만들었다면
model.addAttribute("memberDto", memberDtoList);
모델에 담아서 보내는 것을 선언
----------------------------------------------------------------------------------------------------------------------------
<h1>Member List</h1>
    <br>
    <table>
        <tr>
            <th>ID</th>
            <th>이름</th>
            <th>나이</th>
            <th>주소</th>
            <th>수정</th>
            <th>삭제</th>
        </tr>
        <tr th:each="member : ${memberDto}" th:object="${member}">
            <td th:text="*{id}"></td>
            <td th:text="*{name}"></td>
            <td th:text="*{age}"></td>
            <td th:text="*{address}"></td>
        </tr>
            <td>
                <form th:action="@{/member/update}" method="get">
                    <input type="submit" value="수정">             >>> 수정단추 추가
                </form>
            </td>
            <td>
                <form th:action="@{/member/delete}" method="post">
                    <input type="submit" value="삭제">             >>> 삭제단추 추가
                </form>
            </td>
    </table>

>> HTML파일에 테이블 추가
----------------------------------------------------------------------------------------------------------------------------
신규회원가입 겟맵핑 추가
   @GetMapping("insertForm")
    public String insertForm(Model model) {
        model.addAttribute("memberDto", new MemberDto());  >> 회원가입 화면에 빈 DTO를 보내주는 것
        return "insertForm";
    }
----------------------------------------------------------------------------------------------------------------------------
insertForm HTML 생성

    <form th:action="@{/member/insert}" method="post"> >> 정보입력 후 다시 보낼 때는 post로 가야하니까
        <div>
            <label for="name">이름</label>
            <input type="text" name="name" th:field="${memberDto.name}"> 
	담기는것은 text 타입이고 이름은 name, field는 DTO에 담는다는 거
        </div>
        <div>
            <label for="age">나이</label>
            <input type="text" name="age" th:field="${memberDto.age}">
        </div>
        <div>
            <label for="addr">주소</label>
            <input type="text" name="addr" th:field="${memberDto.address}">
        </div>
        <input type="submit" value="등록">
    </form>
    <br>
    <a th:href="@{/member/show}">메인화면으로 돌아가기</a>


----------------------------------------------------------------------------------------------------------------------------
신규회원등록 화면에서 사용할 postmapping

    @PostMapping("insert")
    public String insertMember(@ModelAttribute("memberDto") MemberDto dto){
        log.info(dto.toString());
        //가져온 DTO를 Entity Member class에 옮겨 담기
        Member member = dto.fromMemberDto(dto);
        log.info("member = " + member.toString());
        // 옮겨담은 걸 저장
        memberRepository.save(member); >> 레포지토리에 member를 담아서 db에 저장해줌
        return "redirect:/member/show"; >> 다시 메인화면으로 돌아간다는 것
    }
이렇게 하면 postmapping으로 신규회원 정보를 받아서 db에 저장 가능
----------------------------------------------------------------------------------------------------------------------------
회원 수정 화면 getmapping

    @GetMapping("/update")
    public String updateMember(@RequestParam("updateId") long id, Model model){
        log.info("======== ID : " + String.valueOf(id));
        // 가져온 ID를 데이터베이스에서 검색
        Member member = memberRepository.findById(id).orElse(null);
        // 검색한 결과를 MemberDto에 옮겨 담기
        MemberDto dto = MemberDto.fromMemberEntity(member);
        // 위 두가지를 한번에 처리하기
        MemberDto memberDto = memberRepository.findById(id).map(x-> MemberDto.fromMemberEntity(x)).orElse(null);
>> optinal사용(여기서는 orElse) : DB에 접근해서 데이터를 가져오는데 만약에 찾는게 없다면(없다면 오류남)
     없을때를 대비해서 사용하는 것
        // DTO를 모델에 담아서 updateForm으로 전송
        model.addAttribute("memberDto", memberDto);
        return "updateForm";
    }

----------------------------------------------------------------------------------------------------------------------------
updateForm HTML 작성

    <form th:action="@{/member/update}" method="post" th:object="${memberDto}">
        <div>
            <label for="id">ID : [[*{id}]]</label>
>>>>>> [[*{id}]]는 원래 th:text로 해야하지만 그렇게 되면 label사이에 있는 ID : 가 뭉개지니까 ID: 도 같이 표현하려고 사용
        </div>
        <div>
            <label for="name">이름</label>
            <input type="text" name="name" th:field="*{name}">
        </div>
        <div>
            <label for="age">나이</label>
            <input type="text" name="age" th:field="*{age}">
        </div>
        <div>
            <label for="addr">주소</label>
            <input type="text" name="addr" th:field="*{address}">
        </div>
        <input type="hidden" th:field="*{id}">  >> id로 받아서 회원정보 수정사항을 DB에 보내주기 위해 사용
        <input type="submit" value="수정">
    </form>
    <br>
    <a th:href="@{/member/show}">메인화면으로 돌아가기</a>
----------------------------------------------------------------------------------------------------------------------------
postmapping 작성
    @PostMapping("update")
    public String update(@ModelAttribute("memberDto") MemberDto dto){
        log.info("update : " + dto.toString());
        // DTO를 Entity로 바꾸기
        Member member = dto.fromMemberDto(dto);
        // DB에 저장하기
        memberRepository.save(member);
        return "redirect:/member/show";
    }

회원정보 수정 폼에서 바꾼 정보들을 DTO에 담아서 postmapping에 담아서 DB로 저장하는 과정
----------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------
sourcetree 다운
