Team에 속성 추가

    @OneToMany(mappedBy = "team", fetch = FetchType.LAZY) >> 지연로딩 추가
    private List<Member> memberList = new ArrayList<>();  >> 리스트로 새로 생성
================================================================================
Member에 추가

    @ManyToOne(fetch = FetchType.EAGER) >> 즉시로딩 추가
    @JoinColumn(name="teamId")
    private Team team;

================================================================================
service에 메서드 추가

    public void insertBothDirectionRelation(){
        // 뉴진스팀을 생성하고 저장
        Team team = new Team();
        team.setTeamId("newJeans");
        team.setTeamName("뉴진스");
        em.persist(team);

        // 뉴진스 멤버 추가
        Member m1 = new Member();
        m1.setMemberId("MinJi");
        m1.setMemberName("민지");
        m1.setTeam(team);
        em.persist(m1);

        // 뉴진스 멤버 추가2
        Member m2 = new Member();
        m2.setMemberId("HyeIn");
        m2.setMemberName("혜인");
        m2.setTeam(team);
        em.persist(m2);
    }

    //양방향설정 중에 연관관계 주인이 아닌곳에 입력하는 경우
    public void insertBothMemberAndTeam(){
        // 멤버1
        Member m1 = new Member();
        m1.setMemberId("강호동");
        m1.setMemberName("호동");
        em.persist(m1);

        // 회원2
        Member m2 = new Member();
        m2.setMemberId("이만기");
        m2.setMemberName("만기");
        em.persist(m2);

        //씨름팀 저장
        Team team = new Team();
        team.setTeamId("씨름팀");
        team.setTeamName("씨름");
        team.getMemberList().add(m1);
        team.getMemberList().add(m2);
        em.persist(team);
    }

================================================================================
parent 엔티티 생성

package com.example.jpatest.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;

@Entity
@Getter
@Setter
public class Parent {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long parentId;
    @OneToMany(mappedBy = "parent", cascade = CascadeType.PERSIST, orphanRemoval = true) >> 부모가 생성되면 자식도 생성되게만들고, 고아객체는 삭제해주는 것
    private List<Child> list = new ArrayList<>();
}


================================================================================
child 엔티티 생성

package com.example.jpatest.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class Child {
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long childId;
    @ManyToOne
    @JoinColumn(name = "parentId")
    private Parent parent;
}

================================================================================
cascade 사용법(service에 메서드 추가)

    public void saveCascade(){
        Child child1 = new Child();
        Child child2 = new Child();
        Parent parent = new Parent();
        child1.setParent(parent);
        child2.setParent(parent);

        parent.getList().add(child1);
        parent.getList().add(child2);
        //부모만 저장 --- 자식들이 따라서 저장
        em.persist(parent);
    }

    public void cascadeDelete(){
        Parent parent = em.find(Parent.class, 1L);
        em.remove(parent);
    }

================================================================================


================================================================================


================================================================================



