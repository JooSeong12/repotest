stream
list안에 있는 내용을 출력할 때 사용(람다식이 필요하다)
ex)
list.stream().forEach(o -> System.out.println(o));
>> for each는 하나씩 따로 빼서 읽어주는 것

list.stream().sorted().forEach(x -> System.out.println(x));
>> sorted는 오름차순 정렬할 때 사용(내림차순은 이름은 같지만 속성이다른 sorted 사용)
sorted(Comparator.comparing(Customer::getName >> 내림차순 기준).reversed()) >> 내림차순 sorted

 list.stream().map(x -> x.length()).forEach(x -> System.out.printf(x + " "));
>> 리스트 내용의 각 길이를 출력(map을 사용해서 출력 이거는 리스트의 내용이 가공되서 출력됨
예를 들어 리스트의 내용이 Tomas이면 출력되는것은 그 길이인 5로 출력)

list.stream()
                .filter(x -> x.length() >= 5)
                .sorted()
                .forEach(x -> System.out.println(x));
>> 리스트의 길이가 5 이상인 자료를 오름차순 출력(필터 이용해서 출력하는데 이건 가공이 안되고
리스트 내용 그대로 출력)

List<Integer> intList = new ArrayList<>();
>> 정수를 담을 때 리스트는 오브젝트만 들어갈 수 있고 원시타입은 안되니까 Integer로 넣어야한다.

int sum = intList.stream()
                .mapToInt(n -> n.intValue())
                .sum();
System.out.println("리스트 합계 : " + sum);
>> 리스트의 합계를 구할 때는 오브젝트 타입은 계산이 안되니 꼭 int타입으로 바꿔서 해야한다.

String[] message = {"안녕하세요", "hello", "반갑습니다 좋은아침입니다", "Good Morning"};
        String result;
        result = Arrays.stream(message).reduce("", (s1, s2)-> {
           if(s1.length() >= s2.length()){
               return s1;
           } else {
               return s2;
           }
        });
        System.out.println(result);
>> reduce



spring boot(framework) >> 웹개발 시 정형화된 기본틀을 만들어줘서 개발소요를 많이 줄여줬음
1. 구글에 스프링 이니셜라이저 검색하고 들어가기
    project > Gradle - groovy, language > JAVA, Sprong Boot > 3.2.4
    Project Metadata
    Group > 보통 회사명
    Artifact > 최종 프로젝트명 아티팩트 밑에는 알아서 바뀜
    
    Add defendencies 클릭 > Spring Web 검색 후 클릭, Thymeleaf 검색 후 클릭
template engine >> 데이터베이스에서 자바로 데이터를 가져온 후 프로그래밍하면 웹서버로 그 결과들을 보이도록
처리해주는 것
2. 밑에 generate 클릭해서 저장
3. 저장 된 압축파일 해제
4. intellij에서 압축해제한 프로젝트를 연다.(불러오는데 시간 좀 걸림)
5. 인터넷 키고 주소창에 localhost:8080 입력 엔터
    Whitelabel Error Page 뜨면 정상임(404 error > 페이지가 없다는 뜻)
6. src > main > resource  > static에 우클릭 new > HTML file 생성 이름은 index.html
> body 밑에 <h1> 반갑습니다 스프링부트</h1>입력하고 다시 프로그램 돌리면
에러가 안뜨고 인터넷에 내용이 보인다.
7. <h2><a href = "hello.html">안녕하세요</a></h2> >> 글자를 클릭할 수 있고 다른 페이지로 넘어가게 해주는 기능
8. hello html을 새로 만들어서 또 body에 넣으면 에러 안뜨고 글자가 보인다.
9. src > java > com.emxample.demoApp 에 새 패키지 만들고 거기에 또 자바클래스를 만든다
10. 만든 클래스에서 클래스 밖에 @Controller넣고 클래스 안에 @GetMapping 넣는다
@GetMapping 안에는

@GetMapping("/hi")
    public String hi(){
        return "ok";
    }
11. resouce > template 패키지에 html을 만들고 거기 바디에 대답을 넣는다.
12. hi안에 Model
13. 동적 html : ok로 가서 <p>태그

동적 html 제일 위에 있는것을 <html xmlns:th="www.thymeleaf.org" 로 바꾸기

application.propertues 들어가서 server.post=80 추가하면 포트를 80으로 변환해줌

file > settint > bulid, excution... > gradle
> build and run using  인텔리제이로 변경, 밑에꺼도 동일 어플라이 클릭

세팅에서 enco 검색 후 file encoding 들어가서 다 utf-8로 변경, Transparent naive ... 체크 후 어플라이

get방식은 서버에 데이터를 요청
post방식은 서버에 데이터를 보내서 저장

웹서버(HTTP 서버라고도 한다)

vs code(visual studio code) 다운로드 검색 > windows용으로 다운
file > open folder > 폴더 지정하거나 새로 만들기
왼쪽아래 extention에서 korean으로 검색하고 설치 그럼 한글로 설정이 바뀜
새폴더 생성하고 새파일 생성 > 그리고 파일창이 새로 생성되면 !치고 엔터
얘는 자동저장이 안되니까 수시로 저장해줘야함
<html lang="en"> 이게 언어가 영어라는 뜻인데 한글로 바꾸는법
가운데 위 검색창에서 명령 표시 및 실행 > settings 검색 > 기본설정 : 사용자 설정(json) 들어가기
> json파일에서
  "emmet.variables": {
        "lang": "ko"
    } 입력하고 저장 그럼 앞으로 계속 ko로 설정되서 생성된다.

auto rename tag 어플 설치(HTML/XML tag를 자동으로 짝지어주는 것)
live server 어플 설치(수정된 것을 바로바로 웹페이지에 적용시켜주는 것)
>> 우측아래 go live 클릭하거나 창에서 우클릭하고 open live server누르면 실행된다.

defer HTML 먼저 읽고 그후에 자바스크립트 읽도록 해주는 명령어

<a href="./about.html">About</a>  >> About이라는 이름으로 링크를 만드는데 /about 사이트로 이동하게해줌

<h1 class="title" id = "title" name = "title">Hello World!</h1>
>> class는  css가 쓰는것, title은 JS가 쓰는 것 , name = 서버가 쓰는것
    즉 Hello Wolrd! 가 저 3곳에 각각 전송되어 사용된다.

종료가 태그가 없는 태그 2가지
<br> >> break인데 얘는 자바에서 println같은거라고 보면 됨 줄 바꿈해주는 역할
<img> >> 이미지


<ul> unordered list
<li> 리스트

<ul class="fruits">
            <li>apple</li>
            <li>banana</li>
        </ul>      >> 보통 이런식으로 li 부모태그로 ul이 있어야함

블록요소와 인라인 요소(상자와 글자)
블록요소(한줄 전체를 차지할 수 있는 요소)
div >> 한줄 전체를 차지하기 때문에 내용이 끝나면 줄바꿈된다.

글자요소(Inline element)
span >> 글자 요소이기 때문에 딱 내용만큼만 차지한다.
a >> link 붙일때 사용

div, span 차이점 ex)
Hello~~~ >> div
Hello~~~ >> div
Hello~~~ >> div
World! World! World! >> span

css
hover : 링크에 마우스 올렸을 때 바뀌게 하는것(ex naver 링크에 마우스 올렸을 때 빨간색으로 변하게 하는것)
active : 링크를 꾹 클릭 하고 있을 때 바뀌게 하는것(ex 마우스로 누르는 동안 파란색으로 보이게 하는 것)

.container .item{ >> 컨테이너 클래스 안에 아이템 클래스를 정의한다는 뜻
  width: 100px;
  height: 100px;
  background-color: royalblue;
  display: flex; >> 가로로 정렬시켜주는 것
  justify-content: center; >> 좌우 가운데정렬
  align-items: center; >> 위아래 가운데 정렬
  color: white;
  font-size: 30px;
}

.container{ >> 부모객체의 클래스를 정의
  height: 200px;
  border: 4px solid black; >> 테두리의 두께, 채우기, 테두리 색
  display: flex; >> 가로로 정렬시켜주는 것
  align-items: center; >> 위아래 가운데 정렬
  justify-content: center; >> 좌우 가운데 정렬
  gap: 10px; >> 객체 간 간격 띄우기
}