1. 데이터 구조 및 알고리즘
    - 데이터 구조 :  데이터를 효율적으로 사용할 수 있도록 정리하는 방법
          1. 배열 : 동일한 타입의 데이터들을 저장하고 고정된 크기를 가지고 있다. 인덱싱 되어 있어 인덱스 번호로 데이터에 접근 가능
                   장점 : 원하는 데이터를 효율적으로 탐색 / 가져올 수 있고 정렬에 용이하다.
                   단점 : 메모리의 크기가 고정되어 있고, 데이터 추가 / 삭제 방법이 비효율적이다.
          2. 스택 : 순서가 보존되는 선형 데이터 구조 유형, LIFO 메커니즘으로 처리한다.     
                   장점 : 동적인 메모리크기, 데이터를 받는 순서대로 정렬, 빠른 런타임
                   단점 : 가장 최신 요소만 가져오고, 한번에 한개의 데이터만 처리 가능
          3. 큐 : 먼저 입력된 요소를 처리하는 FIFO형식의 메커니즘
                   장점 : 동적인 메모리크기, 데이터를 받는 순서대로 정렬, 빠른 런타임
                   단점 : 가장 오래된 요소만 가져오고, 한번에 하나의 데이터만 처리 가능
          4. 링크드리스트 : 각 데이터 시퀀스가 순서를 가지고 연결된 순차적 구조, 각 요소는 node에 저장되는데 node에는 key와 다음 노드를 가리키는 포인터인 next가 포함되어 있다.
                   장점 : 새로운 요소 추가 및 삭제 용이, 동적인 메모리 크기, 대용량 데이터 처리 적합
                   단점 : 배열보다 더 큰 메모리 소모, 처음부터 끝까지 순회하기 때문에 원하는 값을 비효율적으로 탐색
          5. 해시테이블 :  해시함수를 사용하여 변환한 값을 색인(index)으로 삼아 키(key)와 데이터(value)를 저장하는 자료구조
                   장점 : 새로운 요소들의 추가/삭제 용이, 원하는 값 검색/가져오기가 빠르고 효율적
                   단점 : 충돌이 일어 날 수 있다.
          6. 그래프 : nodes/vertices(노드) 사이에 edge(엣지)가 있는 collection, directed(방향) 그래프는 일방통행, undirected(무방향) 그래프는 양방향
                   장점 : 새로운 요소 추가/삭제 용이하고 구조의 응용이 가능하다.
                   단점 : 충돌이 일어날 수 있다.
          7. 트리 : 노드로 구성된 계층적 자료구조다. 최상위 노드(루트)를 만들고, 루트 노드의 child를 추가하고, 그 child에 또 child를 추가하는 방식으로 트리 구조를 구현

    - 알고리즘 : 문제풀이에 필요한 계산절차 또는 처리과정의 순서
       알고리즘은 컴퓨터가 무슨 일을 해야 할지 지시하고, 자료구조는 컴퓨터에게 알고리즘에서 사용하는 자료를 어떻게 저장할지 지시 

2. 운영체제
    - 운영체제(Operating System)은 컴퓨터를 각종 하드웨어 자원과 소프트웨어 자원을 효율적으로 운영관리함으로써 사용자가 시스템을 이용하는데 편리함을 제공하는 소프트웨어
      컴퓨터 하드웨어에 대한 지식이 없어도 프로그램을 용이하게 만들 수 있도록 도와주는 것
    - 운영체제의 구성
       1. 쉘 : 사용자 인터페이스로 사용자나 응용프로그램이 운영체제와 의사소통에 필요한 것
       2. 장치관리 : 키보드, 마우스 같은 주변장치를 제어하는 요소
       3. 파일관리 : 파일을 만들고 수정하고 이름을 부여하는 요소
       4. 메모리관리 : RAM의 일정 부분을 할당하거나 RAM내에 있는 프로그램간의 경계를 설정해서 서로 침범하지 못하게 하는 요소
       5. 처리기관리 : CPU의 처리 능력을 각 작업에 효과적으로 분해하는 요소
    - 운영체제의 종류
       1. 유닉스 :  운영체제의 근본으로 최초의 운영체제이다. C언어를 기반으로 만들어졌으며 유닉스 계열에 리눅스와  맥OS도 포함되어 있다.
       2. 윈도우 : MS에서 개발한 전세계에서 가장 점유율이 높은 운영체제로 사용하기 쉬운 GUI를 제공하고 광범위한 소프트웨어와 호환
       3. 맥OS : 애플에서 개발한 운영체제로 주로 맥북과 아이맥 등 애플 하드웨어에 사용된다. 보안이 강력하고 뛰어난 안정성을 제공
       4. 리눅스 : 오픈소스 운영체제로 대표적으로 우분투가 있으며 서버 운영체제로 많이 사용된다.

3. 네트워킹 : 컴퓨터나 기타 장치들이 네트워크를 통해 서로 연결되어 데이터를 전송하고 자원을 공유하는 것을 의미
     - 네트워킹 장치 : 네트워크 냐의 컴퓨터와 장치들이 데이터를 효과적으로 전송하고 연결할 수 있도록 도와주는 장치
          1. 라우터 : 여러 네트워크를 연결하고 데이터 패킷을 최적의 경로로 전송하는 장치, 네트워크 간의 데이터 전송경로를 결정하고 로컬네트워크를 인터넷과 연결
          2. 스위치 : 네트워크 내에서 데이터 패킷을 전송할 때 올바른 장치로 데이터를 전달하는 장치
          3. 허브 : 들어오는 데이터를 네트워크 내의 모든 장치로 전달, 브로드캐스트 방식으로 모든 포트에 전송
          4. 액세스 포인트 : 무선 장치들이 유선네트워크에 연결할 수 있도록 하는 장치
          5. 모뎀 : 아날로그 신호를 데이터 신호로 변환하여 인터넷 접속을 가능하게 하는 장치
          6. 방화벽 : 네트워크 보안을 위해 외부로부터의 불법 접근을 차단하고 내부 트래픽을 관리하는 장치
          7. 게이트웨이 : 서로 다른 네트워크 프로토콜을 사용하는 네트워크를 연결하는 장치
     - 네트워크 매체 : 데이터가 전송되는 물리적 경로나 방법을 의미
          1. 유선매체
               - 트위스트 페어 케이블 : 두 가닥의 구리선을 꼬아만든 케이블, 전화선과 이더넷 네트워크에 주로 사용
               - 동축 케이블 : 중심 도체, 절연체 , 금속 차폐층, 외부 절연체로 구성된 케이블로 높은 대역폭과 전송거리 제공 / 케이블 TV, 인터넷 서비스에 사용
               -  광섬유 케이블 : 빛을 통해 데이터를 전송하는 케이블로 매우 빠른 속도로 전송 / 고속 인터넷, 장거리 통신망에 사용
          2. 무선매체 
               - 무선 LAN : 무선 신호를 통해 데이터 전송 / 가정용 네트워크, 와이파이
               - 블루투스 : 근거리 무선통신 기술로 짧은 거리 데이터 전송 / 무선이어폰, 스마트폰 악세사리
               - 셀룰러 네트워크 : 이동통신 기술로 3G, 4G, 5G등이 해당 / 스마트폰 데이터 통신, 모바일 인테넛
               - 위성통신 : 인공위성을 통해 데이터 전송 지리적 한계점을 해소 / 위성 전화, 위성  TV
     - 네트워크 프로토콜 : 네트워크에서 데이터 통신을 위해 정의된 규칙과 절차의 집합
          1.  TCP/IP : 대부분의 네트워크에서 사용하는 기본 프로토콜
               - TCP(Transmission Control Protocol) : 데이터의 정확한 전송을 보장하는 프로토콜로 데이터 패킷을 세그먼트로 나누어 전송하고 수신측에서 이를 재조립
               - IP(Internet Protocol) : 데이터를 패킷으로 나누어 네트워크를 통해 전송하며 패킷이 목적지에 도달할 경로를 결정, IP주소를 사용하여 네트워크 내에서 장치를 식별
          2.  HTTP(HyperText Transfer Protocol) : 웹 브라우저와 웹 서버 간의 통신을 위한 프로토콜, 클라이언트와 서버 간의 요청과 응답을 관리
          3.  FTP(File Transfer Protocol) : 네트워크를 통해 파일을 전송하기 위한 프로토콜, 파일 업로드와 다운로드, 파일 관리 작업을 지원
          4.  SMTP(Simple Mail Transfer Protocol) : 이메일 전송을 위한 프로토콜
          5.  DNS(Domain Name System) : 도메인 이름을 IP 주소로 변환하는 프로토콜
          6.  DHCP(Dynamic Host Configuration Protocol) : 네트워크 장치에 동적으로 IP주소를 할당하는 프로토콜
          7.  SNMP(Simple Network Management Protocol) : 네트워크 장치를 모니터링하고 관리하기 위한 프로토콜

4. 데이터베이스
     - 데이터베이스의 종류
          1. 관계형 데이터 베이스 : 데이터를 테이블 형식으로 저장하고 테이블 간의 관계를 정의, SQL을 사용하여 데이터를 관리
               - MySQL, PostgreSQL, Oracle 등이 있음
          2. 비관계형 데이터 베이스 : 정형화된 스키마가 없으며 다양한 데이터 모델을 지원, 대규모 데이터와 빠른 처리속도가 요구되는 환경에서 사용
               - MomgoDB, Redis 등이 있음
     - 데이터베이스의 구성요소
          1. 데이터 : 데이터베이스에 저장되는 실제 정보
          2. 데이터베이스 관리 시스템 : 데이터베이스를 생성, 관리, 유지, 보호하는 소프트웨어
          3. 테이블 : 데이터를 행과 열로 구성하여 저장하는 구조
          4. 스키마 : 데이터베이스 구조를 정의하는 틀로 테이블, 열, 관계 등을 포함 / 데이터베이스의 논리적 구조를 정의
          5. 인덱스 : 테이블에서 데이터 검색속도를 높이기 위해 사용되는 데이터 구조
          6. 뷰 : 하나 이상의 테이블에서 데이터를 선택하여 만든 가상 테이블
          7. 트랜잭션 : 데이터 베이스에서 수행되는 일련의 작업 단위로 완전하게 수행되거나 전혀 수행되지 않아야함
          8. 트리거 : 특정 이벤트가 발생했을 때 자동으로 실행되는 절차로 자동화된 작업을 수행
          9. 저장 프로시저 : 미리 작성된 SQL 코드의 집합으로 필요할 때 호출하여 실행     
5. 프로그래밍 언어
     - low-level laugguage : 하드웨어와 직접적으로 상호작용하는 언어로 하드웨어의 구조와 동작을 직접 제어하고 실행속도가 빠르지만 읽기가 어렵고 작성이 복잡하다.
          1. 기계어 : 이진코드로 작성되며 CPU가 직접 해석하고 실행
          2. 어셈블리어 : 기계어 명령어를 기호화한 언어로 어셈블러를 통해 기계어로 변환 
     - high-level laugguage : 사람이 이해하기 쉬운 형태로 작성되며 컴파일러나 인터프리터를 통해 저수준 언어로 변환
          1. 절차적 언어 : 절차화 기능을 기반으로 프로그램을 구조화 / C, Pascal
          2. 객체지향 언어 : 객체와 클래스 개념을 사용하여 프로그램을 구조화 / java, C++
          3. 스크립트 언어 : 스크립트를 통해 자동화 작업이나 간단한 프로그램을 작성 / Pythom, JavaScript   